{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO24qYrFcOKoY0yaRWu1kJw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Hyperparameter Tuning:**\n","\n","\n","1.   GridSearchCV\n","2.   RandomizedSearchCV\n","\n"],"metadata":{"id":"D5IrrV6uJMh8"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"6eFgKfedIpHm","executionInfo":{"status":"ok","timestamp":1690541601698,"user_tz":-420,"elapsed":1911,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"outputs":[],"source":["# importing the dependencies\n","import numpy as np\n","import pandas as pd\n","import sklearn.datasets\n","from sklearn.svm import SVC\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"]},{"cell_type":"markdown","source":["We will be working on the breast cancer dataset"],"metadata":{"id":"9mJdx-jlKLH4"}},{"cell_type":"code","source":["# loading the data from sklearn\n","breast_cancer_dataset = sklearn.datasets.load_breast_cancer()"],"metadata":{"id":"_lmdeZiLJdGm","executionInfo":{"status":"ok","timestamp":1690541601699,"user_tz":-420,"elapsed":6,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["print(breast_cancer_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xeMBIvC_Osi4","executionInfo":{"status":"ok","timestamp":1690541602350,"user_tz":-420,"elapsed":655,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"9499e495-838c-4f23-f323-fef0ad62fa67"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["{'data': array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2.654e-01, 4.601e-01,\n","        1.189e-01],\n","       [2.057e+01, 1.777e+01, 1.329e+02, ..., 1.860e-01, 2.750e-01,\n","        8.902e-02],\n","       [1.969e+01, 2.125e+01, 1.300e+02, ..., 2.430e-01, 3.613e-01,\n","        8.758e-02],\n","       ...,\n","       [1.660e+01, 2.808e+01, 1.083e+02, ..., 1.418e-01, 2.218e-01,\n","        7.820e-02],\n","       [2.060e+01, 2.933e+01, 1.401e+02, ..., 2.650e-01, 4.087e-01,\n","        1.240e-01],\n","       [7.760e+00, 2.454e+01, 4.792e+01, ..., 0.000e+00, 2.871e-01,\n","        7.039e-02]]), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]), 'frame': None, 'target_names': array(['malignant', 'benign'], dtype='<U9'), 'DESCR': '.. _breast_cancer_dataset:\\n\\nBreast cancer wisconsin (diagnostic) dataset\\n--------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 569\\n\\n    :Number of Attributes: 30 numeric, predictive attributes and the class\\n\\n    :Attribute Information:\\n        - radius (mean of distances from center to points on the perimeter)\\n        - texture (standard deviation of gray-scale values)\\n        - perimeter\\n        - area\\n        - smoothness (local variation in radius lengths)\\n        - compactness (perimeter^2 / area - 1.0)\\n        - concavity (severity of concave portions of the contour)\\n        - concave points (number of concave portions of the contour)\\n        - symmetry\\n        - fractal dimension (\"coastline approximation\" - 1)\\n\\n        The mean, standard error, and \"worst\" or largest (mean of the three\\n        worst/largest values) of these features were computed for each image,\\n        resulting in 30 features.  For instance, field 0 is Mean Radius, field\\n        10 is Radius SE, field 20 is Worst Radius.\\n\\n        - class:\\n                - WDBC-Malignant\\n                - WDBC-Benign\\n\\n    :Summary Statistics:\\n\\n    ===================================== ====== ======\\n                                           Min    Max\\n    ===================================== ====== ======\\n    radius (mean):                        6.981  28.11\\n    texture (mean):                       9.71   39.28\\n    perimeter (mean):                     43.79  188.5\\n    area (mean):                          143.5  2501.0\\n    smoothness (mean):                    0.053  0.163\\n    compactness (mean):                   0.019  0.345\\n    concavity (mean):                     0.0    0.427\\n    concave points (mean):                0.0    0.201\\n    symmetry (mean):                      0.106  0.304\\n    fractal dimension (mean):             0.05   0.097\\n    radius (standard error):              0.112  2.873\\n    texture (standard error):             0.36   4.885\\n    perimeter (standard error):           0.757  21.98\\n    area (standard error):                6.802  542.2\\n    smoothness (standard error):          0.002  0.031\\n    compactness (standard error):         0.002  0.135\\n    concavity (standard error):           0.0    0.396\\n    concave points (standard error):      0.0    0.053\\n    symmetry (standard error):            0.008  0.079\\n    fractal dimension (standard error):   0.001  0.03\\n    radius (worst):                       7.93   36.04\\n    texture (worst):                      12.02  49.54\\n    perimeter (worst):                    50.41  251.2\\n    area (worst):                         185.2  4254.0\\n    smoothness (worst):                   0.071  0.223\\n    compactness (worst):                  0.027  1.058\\n    concavity (worst):                    0.0    1.252\\n    concave points (worst):               0.0    0.291\\n    symmetry (worst):                     0.156  0.664\\n    fractal dimension (worst):            0.055  0.208\\n    ===================================== ====== ======\\n\\n    :Missing Attribute Values: None\\n\\n    :Class Distribution: 212 - Malignant, 357 - Benign\\n\\n    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\\n\\n    :Donor: Nick Street\\n\\n    :Date: November, 1995\\n\\nThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\\nhttps://goo.gl/U2Uwz2\\n\\nFeatures are computed from a digitized image of a fine needle\\naspirate (FNA) of a breast mass.  They describe\\ncharacteristics of the cell nuclei present in the image.\\n\\nSeparating plane described above was obtained using\\nMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\\nConstruction Via Linear Programming.\" Proceedings of the 4th\\nMidwest Artificial Intelligence and Cognitive Science Society,\\npp. 97-101, 1992], a classification method which uses linear\\nprogramming to construct a decision tree.  Relevant features\\nwere selected using an exhaustive search in the space of 1-4\\nfeatures and 1-3 separating planes.\\n\\nThe actual linear program used to obtain the separating plane\\nin the 3-dimensional space is that described in:\\n[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\\nProgramming Discrimination of Two Linearly Inseparable Sets\",\\nOptimization Methods and Software 1, 1992, 23-34].\\n\\nThis database is also available through the UW CS ftp server:\\n\\nftp ftp.cs.wisc.edu\\ncd math-prog/cpo-dataset/machine-learn/WDBC/\\n\\n.. topic:: References\\n\\n   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \\n     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \\n     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\\n     San Jose, CA, 1993.\\n   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \\n     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \\n     July-August 1995.\\n   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\\n     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \\n     163-171.', 'feature_names': array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n","       'mean smoothness', 'mean compactness', 'mean concavity',\n","       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n","       'radius error', 'texture error', 'perimeter error', 'area error',\n","       'smoothness error', 'compactness error', 'concavity error',\n","       'concave points error', 'symmetry error',\n","       'fractal dimension error', 'worst radius', 'worst texture',\n","       'worst perimeter', 'worst area', 'worst smoothness',\n","       'worst compactness', 'worst concavity', 'worst concave points',\n","       'worst symmetry', 'worst fractal dimension'], dtype='<U23'), 'filename': 'breast_cancer.csv', 'data_module': 'sklearn.datasets.data'}\n"]}]},{"cell_type":"code","source":["# loading the data to a data frame\n","data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)"],"metadata":{"id":"W7M3RUdbLUX-","executionInfo":{"status":"ok","timestamp":1690541602351,"user_tz":-420,"elapsed":25,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# print the first 5 rows of the dataframe\n","data_frame.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"i8vFSlhGO8MX","executionInfo":{"status":"ok","timestamp":1690541602352,"user_tz":-420,"elapsed":25,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"b03fe238-b895-4d61-f9df-3931c58c3456"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","0        17.99         10.38          122.80     1001.0          0.11840   \n","1        20.57         17.77          132.90     1326.0          0.08474   \n","2        19.69         21.25          130.00     1203.0          0.10960   \n","3        11.42         20.38           77.58      386.1          0.14250   \n","4        20.29         14.34          135.10     1297.0          0.10030   \n","\n","   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","0           0.27760          0.3001              0.14710         0.2419   \n","1           0.07864          0.0869              0.07017         0.1812   \n","2           0.15990          0.1974              0.12790         0.2069   \n","3           0.28390          0.2414              0.10520         0.2597   \n","4           0.13280          0.1980              0.10430         0.1809   \n","\n","   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n","0                 0.07871  ...         25.38          17.33           184.60   \n","1                 0.05667  ...         24.99          23.41           158.80   \n","2                 0.05999  ...         23.57          25.53           152.50   \n","3                 0.09744  ...         14.91          26.50            98.87   \n","4                 0.05883  ...         22.54          16.67           152.20   \n","\n","   worst area  worst smoothness  worst compactness  worst concavity  \\\n","0      2019.0            0.1622             0.6656           0.7119   \n","1      1956.0            0.1238             0.1866           0.2416   \n","2      1709.0            0.1444             0.4245           0.4504   \n","3       567.7            0.2098             0.8663           0.6869   \n","4      1575.0            0.1374             0.2050           0.4000   \n","\n","   worst concave points  worst symmetry  worst fractal dimension  \n","0                0.2654          0.4601                  0.11890  \n","1                0.1860          0.2750                  0.08902  \n","2                0.2430          0.3613                  0.08758  \n","3                0.2575          0.6638                  0.17300  \n","4                0.1625          0.2364                  0.07678  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","\n","  <div id=\"df-f2e60b04-583f-451e-89e6-c88c91651997\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>...</th>\n","      <th>worst radius</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>...</td>\n","      <td>25.38</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>...</td>\n","      <td>24.99</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>0.05999</td>\n","      <td>...</td>\n","      <td>23.57</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>0.09744</td>\n","      <td>...</td>\n","      <td>14.91</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>0.05883</td>\n","      <td>...</td>\n","      <td>22.54</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2e60b04-583f-451e-89e6-c88c91651997')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-0b72d6ea-8deb-489a-b293-9da07ea1be58\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b72d6ea-8deb-489a-b293-9da07ea1be58')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-0b72d6ea-8deb-489a-b293-9da07ea1be58 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f2e60b04-583f-451e-89e6-c88c91651997 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f2e60b04-583f-451e-89e6-c88c91651997');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# adding the 'target' column to the data frame\n","data_frame['label'] = breast_cancer_dataset.target"],"metadata":{"id":"l4e-F1dtO6A0","executionInfo":{"status":"ok","timestamp":1690541602352,"user_tz":-420,"elapsed":21,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# print the first 5 rows of the dataframe\n","data_frame.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"xfNdayWSPCNm","executionInfo":{"status":"ok","timestamp":1690541602353,"user_tz":-420,"elapsed":21,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"e6dd42c5-8b49-472a-ff4a-be8456e0ceb7"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","0        17.99         10.38          122.80     1001.0          0.11840   \n","1        20.57         17.77          132.90     1326.0          0.08474   \n","2        19.69         21.25          130.00     1203.0          0.10960   \n","3        11.42         20.38           77.58      386.1          0.14250   \n","4        20.29         14.34          135.10     1297.0          0.10030   \n","\n","   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","0           0.27760          0.3001              0.14710         0.2419   \n","1           0.07864          0.0869              0.07017         0.1812   \n","2           0.15990          0.1974              0.12790         0.2069   \n","3           0.28390          0.2414              0.10520         0.2597   \n","4           0.13280          0.1980              0.10430         0.1809   \n","\n","   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n","0                 0.07871  ...          17.33           184.60      2019.0   \n","1                 0.05667  ...          23.41           158.80      1956.0   \n","2                 0.05999  ...          25.53           152.50      1709.0   \n","3                 0.09744  ...          26.50            98.87       567.7   \n","4                 0.05883  ...          16.67           152.20      1575.0   \n","\n","   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n","0            0.1622             0.6656           0.7119                0.2654   \n","1            0.1238             0.1866           0.2416                0.1860   \n","2            0.1444             0.4245           0.4504                0.2430   \n","3            0.2098             0.8663           0.6869                0.2575   \n","4            0.1374             0.2050           0.4000                0.1625   \n","\n","   worst symmetry  worst fractal dimension  label  \n","0          0.4601                  0.11890      0  \n","1          0.2750                  0.08902      0  \n","2          0.3613                  0.08758      0  \n","3          0.6638                  0.17300      0  \n","4          0.2364                  0.07678      0  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","\n","  <div id=\"df-222b3b4b-d520-4eea-88c9-2890251b9581\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>...</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>...</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>...</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>0.05999</td>\n","      <td>...</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>0.09744</td>\n","      <td>...</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>0.05883</td>\n","      <td>...</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-222b3b4b-d520-4eea-88c9-2890251b9581')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-284bda88-4c6b-4ea5-9ac7-407b866dce7a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-284bda88-4c6b-4ea5-9ac7-407b866dce7a')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-284bda88-4c6b-4ea5-9ac7-407b866dce7a button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-222b3b4b-d520-4eea-88c9-2890251b9581 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-222b3b4b-d520-4eea-88c9-2890251b9581');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# number of rows and Columns in this dataset\n","data_frame.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qndV2eAUMXBY","executionInfo":{"status":"ok","timestamp":1690541602353,"user_tz":-420,"elapsed":17,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"64e394f5-3f3d-4099-dc97-57b74b9be0f3"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 31)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# checking for missing values\n","data_frame.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IL8LKwztPJpX","executionInfo":{"status":"ok","timestamp":1690541602830,"user_tz":-420,"elapsed":10,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"0a76a342-70f3-4f50-f260-f6225f515939"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["mean radius                0\n","mean texture               0\n","mean perimeter             0\n","mean area                  0\n","mean smoothness            0\n","mean compactness           0\n","mean concavity             0\n","mean concave points        0\n","mean symmetry              0\n","mean fractal dimension     0\n","radius error               0\n","texture error              0\n","perimeter error            0\n","area error                 0\n","smoothness error           0\n","compactness error          0\n","concavity error            0\n","concave points error       0\n","symmetry error             0\n","fractal dimension error    0\n","worst radius               0\n","worst texture              0\n","worst perimeter            0\n","worst area                 0\n","worst smoothness           0\n","worst compactness          0\n","worst concavity            0\n","worst concave points       0\n","worst symmetry             0\n","worst fractal dimension    0\n","label                      0\n","dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# checking the distribution of Target Varibale\n","data_frame['label'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3XQHYCMwOZlF","executionInfo":{"status":"ok","timestamp":1690541602830,"user_tz":-420,"elapsed":9,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"49530da6-f1a9-427a-b47d-0c16f5666ee9"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    357\n","0    212\n","Name: label, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["1 --> Benign\n","\n","0 --> Malignant"],"metadata":{"id":"_WOK1rw1MeGZ"}},{"cell_type":"markdown","source":["Separating the features and target"],"metadata":{"id":"EJobdKlfPaW_"}},{"cell_type":"code","source":["X = data_frame.drop(columns='label', axis=1)\n","Y = data_frame['label']"],"metadata":{"id":"-BRF89ESMZUU","executionInfo":{"status":"ok","timestamp":1690541602831,"user_tz":-420,"elapsed":8,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pNKv8fdZPeDx","executionInfo":{"status":"ok","timestamp":1690541602831,"user_tz":-420,"elapsed":8,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"7b6eb53e-aed0-4dcb-d304-2ffff47feb08"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","0          17.99         10.38          122.80     1001.0          0.11840   \n","1          20.57         17.77          132.90     1326.0          0.08474   \n","2          19.69         21.25          130.00     1203.0          0.10960   \n","3          11.42         20.38           77.58      386.1          0.14250   \n","4          20.29         14.34          135.10     1297.0          0.10030   \n","..           ...           ...             ...        ...              ...   \n","564        21.56         22.39          142.00     1479.0          0.11100   \n","565        20.13         28.25          131.20     1261.0          0.09780   \n","566        16.60         28.08          108.30      858.1          0.08455   \n","567        20.60         29.33          140.10     1265.0          0.11780   \n","568         7.76         24.54           47.92      181.0          0.05263   \n","\n","     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","0             0.27760         0.30010              0.14710         0.2419   \n","1             0.07864         0.08690              0.07017         0.1812   \n","2             0.15990         0.19740              0.12790         0.2069   \n","3             0.28390         0.24140              0.10520         0.2597   \n","4             0.13280         0.19800              0.10430         0.1809   \n","..                ...             ...                  ...            ...   \n","564           0.11590         0.24390              0.13890         0.1726   \n","565           0.10340         0.14400              0.09791         0.1752   \n","566           0.10230         0.09251              0.05302         0.1590   \n","567           0.27700         0.35140              0.15200         0.2397   \n","568           0.04362         0.00000              0.00000         0.1587   \n","\n","     mean fractal dimension  ...  worst radius  worst texture  \\\n","0                   0.07871  ...        25.380          17.33   \n","1                   0.05667  ...        24.990          23.41   \n","2                   0.05999  ...        23.570          25.53   \n","3                   0.09744  ...        14.910          26.50   \n","4                   0.05883  ...        22.540          16.67   \n","..                      ...  ...           ...            ...   \n","564                 0.05623  ...        25.450          26.40   \n","565                 0.05533  ...        23.690          38.25   \n","566                 0.05648  ...        18.980          34.12   \n","567                 0.07016  ...        25.740          39.42   \n","568                 0.05884  ...         9.456          30.37   \n","\n","     worst perimeter  worst area  worst smoothness  worst compactness  \\\n","0             184.60      2019.0           0.16220            0.66560   \n","1             158.80      1956.0           0.12380            0.18660   \n","2             152.50      1709.0           0.14440            0.42450   \n","3              98.87       567.7           0.20980            0.86630   \n","4             152.20      1575.0           0.13740            0.20500   \n","..               ...         ...               ...                ...   \n","564           166.10      2027.0           0.14100            0.21130   \n","565           155.00      1731.0           0.11660            0.19220   \n","566           126.70      1124.0           0.11390            0.30940   \n","567           184.60      1821.0           0.16500            0.86810   \n","568            59.16       268.6           0.08996            0.06444   \n","\n","     worst concavity  worst concave points  worst symmetry  \\\n","0             0.7119                0.2654          0.4601   \n","1             0.2416                0.1860          0.2750   \n","2             0.4504                0.2430          0.3613   \n","3             0.6869                0.2575          0.6638   \n","4             0.4000                0.1625          0.2364   \n","..               ...                   ...             ...   \n","564           0.4107                0.2216          0.2060   \n","565           0.3215                0.1628          0.2572   \n","566           0.3403                0.1418          0.2218   \n","567           0.9387                0.2650          0.4087   \n","568           0.0000                0.0000          0.2871   \n","\n","     worst fractal dimension  \n","0                    0.11890  \n","1                    0.08902  \n","2                    0.08758  \n","3                    0.17300  \n","4                    0.07678  \n","..                       ...  \n","564                  0.07115  \n","565                  0.06637  \n","566                  0.07820  \n","567                  0.12400  \n","568                  0.07039  \n","\n","[569 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["print(Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tKTKvhRgPeyc","executionInfo":{"status":"ok","timestamp":1690541602831,"user_tz":-420,"elapsed":7,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"8cfd6c6f-65ca-47b5-dce1-ca5c51297bc8"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0      0\n","1      0\n","2      0\n","3      0\n","4      0\n","      ..\n","564    0\n","565    0\n","566    0\n","567    0\n","568    1\n","Name: label, Length: 569, dtype: int64\n"]}]},{"cell_type":"code","source":[" X = np.asarray(X)\n"," Y = np.asarray(Y)"],"metadata":{"id":"4OFJBpqfTCjJ","executionInfo":{"status":"ok","timestamp":1690541602832,"user_tz":-420,"elapsed":6,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["#**GridSearchCV**"],"metadata":{"id":"oRZT0lOjDFYv"}},{"cell_type":"markdown","source":["GridSearchCV is used for determining the best parameters for our model"],"metadata":{"id":"FCspxr1DDJe2"}},{"cell_type":"code","source":["# loading the SVC model\n","model = SVC()"],"metadata":{"id":"r3rh8uIy9p2D","executionInfo":{"status":"ok","timestamp":1690541602832,"user_tz":-420,"elapsed":5,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# hyperparameters\n","\n","parameters = {\n","              'kernel':['linear','poly','rbf','sigmoid'],\n","              'C':[1, 5, 10, 20]\n","}"],"metadata":{"id":"M540T5NKDcM5","executionInfo":{"status":"ok","timestamp":1690541603180,"user_tz":-420,"elapsed":353,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# grid search\n","classifier = GridSearchCV(model, parameters, cv=5)"],"metadata":{"id":"29CM6hFKD6dQ","executionInfo":{"status":"ok","timestamp":1690541603180,"user_tz":-420,"elapsed":5,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# fitting the data to our model\n","classifier.fit(X, Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":118},"id":"oN9suJpLEzrN","executionInfo":{"status":"ok","timestamp":1690541708904,"user_tz":-420,"elapsed":105728,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"333c44a6-d4cd-4e43-e54f-61dcea88a186"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=SVC(),\n","             param_grid={'C': [1, 5, 10, 20],\n","                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']})"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [1, 5, 10, 20],\n","                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=SVC(),\n","             param_grid={&#x27;C&#x27;: [1, 5, 10, 20],\n","                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["classifier.cv_results_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bqkaZYkBFGUA","executionInfo":{"status":"ok","timestamp":1690541708904,"user_tz":-420,"elapsed":17,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"5942d055-e0cd-43a9-ff2b-736c17bbae37"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([3.88443222e+00, 6.70375824e-03, 8.18758011e-03, 2.29861736e-02,\n","        3.12329159e+00, 3.81765366e-03, 4.14881706e-03, 1.44080639e-02,\n","        5.55389266e+00, 4.71177101e-03, 4.31437492e-03, 1.46014214e-02,\n","        7.53009024e+00, 6.63862228e-03, 4.74352837e-03, 1.47452354e-02]),\n"," 'std_fit_time': array([2.31919773e+00, 3.09092658e-04, 5.11665344e-04, 5.19498557e-04,\n","        8.19761815e-01, 2.92459067e-04, 2.14907053e-04, 8.84034248e-04,\n","        2.29356428e+00, 2.53991358e-04, 1.20858740e-04, 6.72488423e-04,\n","        2.56851365e+00, 1.64684646e-03, 1.03764544e-03, 5.62369178e-04]),\n"," 'mean_score_time': array([0.00308747, 0.00277019, 0.00332785, 0.00603681, 0.001367  ,\n","        0.0011035 , 0.00160332, 0.0038887 , 0.0014255 , 0.00148606,\n","        0.00179358, 0.00431218, 0.00140781, 0.00192943, 0.00153728,\n","        0.00386834]),\n"," 'std_score_time': array([1.68359858e-03, 1.21911975e-03, 1.96295969e-04, 7.42895459e-05,\n","        1.24761561e-04, 1.11232935e-05, 5.42789415e-05, 2.97045041e-04,\n","        2.86293721e-04, 2.00764866e-04, 4.60698238e-05, 8.18704095e-04,\n","        2.09736020e-04, 2.89653812e-04, 5.25139098e-05, 1.01767037e-04]),\n"," 'param_C': masked_array(data=[1, 1, 1, 1, 5, 5, 5, 5, 10, 10, 10, 10, 20, 20, 20, 20],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'param_kernel': masked_array(data=['linear', 'poly', 'rbf', 'sigmoid', 'linear', 'poly',\n","                    'rbf', 'sigmoid', 'linear', 'poly', 'rbf', 'sigmoid',\n","                    'linear', 'poly', 'rbf', 'sigmoid'],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False, False, False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'C': 1, 'kernel': 'linear'},\n","  {'C': 1, 'kernel': 'poly'},\n","  {'C': 1, 'kernel': 'rbf'},\n","  {'C': 1, 'kernel': 'sigmoid'},\n","  {'C': 5, 'kernel': 'linear'},\n","  {'C': 5, 'kernel': 'poly'},\n","  {'C': 5, 'kernel': 'rbf'},\n","  {'C': 5, 'kernel': 'sigmoid'},\n","  {'C': 10, 'kernel': 'linear'},\n","  {'C': 10, 'kernel': 'poly'},\n","  {'C': 10, 'kernel': 'rbf'},\n","  {'C': 10, 'kernel': 'sigmoid'},\n","  {'C': 20, 'kernel': 'linear'},\n","  {'C': 20, 'kernel': 'poly'},\n","  {'C': 20, 'kernel': 'rbf'},\n","  {'C': 20, 'kernel': 'sigmoid'}],\n"," 'split0_test_score': array([0.94736842, 0.84210526, 0.85087719, 0.54385965, 0.94736842,\n","        0.88596491, 0.88596491, 0.49122807, 0.93859649, 0.88596491,\n","        0.87719298, 0.48245614, 0.92982456, 0.87719298, 0.87719298,\n","        0.47368421]),\n"," 'split1_test_score': array([0.92982456, 0.88596491, 0.89473684, 0.45614035, 0.93859649,\n","        0.9122807 , 0.92982456, 0.42105263, 0.93859649, 0.92105263,\n","        0.92105263, 0.40350877, 0.95614035, 0.92105263, 0.92105263,\n","        0.40350877]),\n"," 'split2_test_score': array([0.97368421, 0.92982456, 0.92982456, 0.46491228, 0.97368421,\n","        0.92105263, 0.93859649, 0.42105263, 0.97368421, 0.90350877,\n","        0.9122807 , 0.42105263, 0.95614035, 0.90350877, 0.92105263,\n","        0.42105263]),\n"," 'split3_test_score': array([0.92105263, 0.94736842, 0.94736842, 0.38596491, 0.92982456,\n","        0.93859649, 0.94736842, 0.35087719, 0.94736842, 0.93859649,\n","        0.95614035, 0.34210526, 0.93859649, 0.93859649, 0.94736842,\n","        0.34210526]),\n"," 'split4_test_score': array([0.95575221, 0.9380531 , 0.9380531 , 0.45132743, 0.96460177,\n","        0.95575221, 0.95575221, 0.37168142, 0.96460177, 0.95575221,\n","        0.94690265, 0.36283186, 0.96460177, 0.95575221, 0.9380531 ,\n","        0.3539823 ]),\n"," 'mean_test_score': array([0.94553641, 0.90866325, 0.91217202, 0.46044093, 0.95081509,\n","        0.92272939, 0.93150132, 0.41117839, 0.95256948, 0.920975  ,\n","        0.92271386, 0.40239093, 0.9490607 , 0.91922062, 0.92094395,\n","        0.39886664]),\n"," 'std_test_score': array([0.01868869, 0.03938232, 0.03544367, 0.05025317, 0.01621632,\n","        0.02368918, 0.02435811, 0.04857818, 0.01419963, 0.02470123,\n","        0.02787898, 0.0489065 , 0.01281637, 0.02730027, 0.02410455,\n","        0.0476401 ]),\n"," 'rank_test_score': array([ 4, 12, 11, 13,  2,  6,  5, 14,  1,  8,  7, 15,  3, 10,  9, 16],\n","       dtype=int32)}"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# best parameters\n","\n","best_parameters = classifier.best_params_\n","print(best_parameters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gY2z0CWNGIjB","executionInfo":{"status":"ok","timestamp":1690541708905,"user_tz":-420,"elapsed":15,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"b2fd7d81-9344-4692-886d-927211876b80"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["{'C': 10, 'kernel': 'linear'}\n"]}]},{"cell_type":"code","source":["# higest accuracy\n","\n","highest_accuracy = classifier.best_score_\n","print(highest_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0LbbSLRGgy8","executionInfo":{"status":"ok","timestamp":1690541708905,"user_tz":-420,"elapsed":12,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"99285ef7-0c95-43fb-c988-e05c307dab7d"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9525694767893185\n"]}]},{"cell_type":"code","source":["# loading the results to pandas dataframe\n","result = pd.DataFrame(classifier.cv_results_)"],"metadata":{"id":"3_g9aue0Fqzg","executionInfo":{"status":"ok","timestamp":1690541708906,"user_tz":-420,"elapsed":12,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["result.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"ki2MjrG5G5Xq","executionInfo":{"status":"ok","timestamp":1690541708906,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"7f7a1690-80d9-4b35-a8b4-7ee524338751"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n","0       3.884432      2.319198         0.003087        0.001684       1   \n","1       0.006704      0.000309         0.002770        0.001219       1   \n","2       0.008188      0.000512         0.003328        0.000196       1   \n","3       0.022986      0.000519         0.006037        0.000074       1   \n","4       3.123292      0.819762         0.001367        0.000125       5   \n","\n","  param_kernel                         params  split0_test_score  \\\n","0       linear   {'C': 1, 'kernel': 'linear'}           0.947368   \n","1         poly     {'C': 1, 'kernel': 'poly'}           0.842105   \n","2          rbf      {'C': 1, 'kernel': 'rbf'}           0.850877   \n","3      sigmoid  {'C': 1, 'kernel': 'sigmoid'}           0.543860   \n","4       linear   {'C': 5, 'kernel': 'linear'}           0.947368   \n","\n","   split1_test_score  split2_test_score  split3_test_score  split4_test_score  \\\n","0           0.929825           0.973684           0.921053           0.955752   \n","1           0.885965           0.929825           0.947368           0.938053   \n","2           0.894737           0.929825           0.947368           0.938053   \n","3           0.456140           0.464912           0.385965           0.451327   \n","4           0.938596           0.973684           0.929825           0.964602   \n","\n","   mean_test_score  std_test_score  rank_test_score  \n","0         0.945536        0.018689                4  \n","1         0.908663        0.039382               12  \n","2         0.912172        0.035444               11  \n","3         0.460441        0.050253               13  \n","4         0.950815        0.016216                2  "],"text/html":["\n","\n","  <div id=\"df-34914979-acdf-4d31-9574-09b69e785220\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_C</th>\n","      <th>param_kernel</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>split3_test_score</th>\n","      <th>split4_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.884432</td>\n","      <td>2.319198</td>\n","      <td>0.003087</td>\n","      <td>0.001684</td>\n","      <td>1</td>\n","      <td>linear</td>\n","      <td>{'C': 1, 'kernel': 'linear'}</td>\n","      <td>0.947368</td>\n","      <td>0.929825</td>\n","      <td>0.973684</td>\n","      <td>0.921053</td>\n","      <td>0.955752</td>\n","      <td>0.945536</td>\n","      <td>0.018689</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.006704</td>\n","      <td>0.000309</td>\n","      <td>0.002770</td>\n","      <td>0.001219</td>\n","      <td>1</td>\n","      <td>poly</td>\n","      <td>{'C': 1, 'kernel': 'poly'}</td>\n","      <td>0.842105</td>\n","      <td>0.885965</td>\n","      <td>0.929825</td>\n","      <td>0.947368</td>\n","      <td>0.938053</td>\n","      <td>0.908663</td>\n","      <td>0.039382</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.008188</td>\n","      <td>0.000512</td>\n","      <td>0.003328</td>\n","      <td>0.000196</td>\n","      <td>1</td>\n","      <td>rbf</td>\n","      <td>{'C': 1, 'kernel': 'rbf'}</td>\n","      <td>0.850877</td>\n","      <td>0.894737</td>\n","      <td>0.929825</td>\n","      <td>0.947368</td>\n","      <td>0.938053</td>\n","      <td>0.912172</td>\n","      <td>0.035444</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.022986</td>\n","      <td>0.000519</td>\n","      <td>0.006037</td>\n","      <td>0.000074</td>\n","      <td>1</td>\n","      <td>sigmoid</td>\n","      <td>{'C': 1, 'kernel': 'sigmoid'}</td>\n","      <td>0.543860</td>\n","      <td>0.456140</td>\n","      <td>0.464912</td>\n","      <td>0.385965</td>\n","      <td>0.451327</td>\n","      <td>0.460441</td>\n","      <td>0.050253</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.123292</td>\n","      <td>0.819762</td>\n","      <td>0.001367</td>\n","      <td>0.000125</td>\n","      <td>5</td>\n","      <td>linear</td>\n","      <td>{'C': 5, 'kernel': 'linear'}</td>\n","      <td>0.947368</td>\n","      <td>0.938596</td>\n","      <td>0.973684</td>\n","      <td>0.929825</td>\n","      <td>0.964602</td>\n","      <td>0.950815</td>\n","      <td>0.016216</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34914979-acdf-4d31-9574-09b69e785220')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-9514e409-c7d9-418b-b588-6eed2fb3ef09\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9514e409-c7d9-418b-b588-6eed2fb3ef09')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-9514e409-c7d9-418b-b588-6eed2fb3ef09 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-34914979-acdf-4d31-9574-09b69e785220 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-34914979-acdf-4d31-9574-09b69e785220');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["grid_search_result = result[['param_C','param_kernel','mean_test_score']]"],"metadata":{"id":"FEVlRsUdG7MO","executionInfo":{"status":"ok","timestamp":1690541708906,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["grid_search_result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"id":"vSNtss-uHcgc","executionInfo":{"status":"ok","timestamp":1690541708907,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"41eb61a0-f270-40c1-f01b-0e92924688fd"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   param_C param_kernel  mean_test_score\n","0        1       linear         0.945536\n","1        1         poly         0.908663\n","2        1          rbf         0.912172\n","3        1      sigmoid         0.460441\n","4        5       linear         0.950815\n","5        5         poly         0.922729\n","6        5          rbf         0.931501\n","7        5      sigmoid         0.411178\n","8       10       linear         0.952569\n","9       10         poly         0.920975\n","10      10          rbf         0.922714\n","11      10      sigmoid         0.402391\n","12      20       linear         0.949061\n","13      20         poly         0.919221\n","14      20          rbf         0.920944\n","15      20      sigmoid         0.398867"],"text/html":["\n","\n","  <div id=\"df-17c7732b-2f7c-4654-8d1c-20405615a7dd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>param_C</th>\n","      <th>param_kernel</th>\n","      <th>mean_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>linear</td>\n","      <td>0.945536</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>poly</td>\n","      <td>0.908663</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>rbf</td>\n","      <td>0.912172</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>sigmoid</td>\n","      <td>0.460441</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>linear</td>\n","      <td>0.950815</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>poly</td>\n","      <td>0.922729</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5</td>\n","      <td>rbf</td>\n","      <td>0.931501</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5</td>\n","      <td>sigmoid</td>\n","      <td>0.411178</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>10</td>\n","      <td>linear</td>\n","      <td>0.952569</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>poly</td>\n","      <td>0.920975</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>10</td>\n","      <td>rbf</td>\n","      <td>0.922714</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>10</td>\n","      <td>sigmoid</td>\n","      <td>0.402391</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>20</td>\n","      <td>linear</td>\n","      <td>0.949061</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>20</td>\n","      <td>poly</td>\n","      <td>0.919221</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>20</td>\n","      <td>rbf</td>\n","      <td>0.920944</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>20</td>\n","      <td>sigmoid</td>\n","      <td>0.398867</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17c7732b-2f7c-4654-8d1c-20405615a7dd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-2e0ea60d-d160-4e2b-85b5-92fe0bd34902\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e0ea60d-d160-4e2b-85b5-92fe0bd34902')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-2e0ea60d-d160-4e2b-85b5-92fe0bd34902 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-17c7732b-2f7c-4654-8d1c-20405615a7dd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-17c7732b-2f7c-4654-8d1c-20405615a7dd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["Highest Accuracy = 95.2%\n","\n","Best Parameters = {'C':10, 'kernel':'linear'}"],"metadata":{"id":"IWOCmBUlH0YY"}},{"cell_type":"markdown","source":["#**RandomizedSearchCV**"],"metadata":{"id":"7-zu3K_pIG_8"}},{"cell_type":"code","source":["# loading the SVC model\n","model = SVC()"],"metadata":{"id":"Z0joe7YZHicX","executionInfo":{"status":"ok","timestamp":1690541708907,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# hyperparameters\n","\n","parameters = {\n","              'kernel':['linear','poly','rbf','sigmoid'],\n","              'C':[1, 5, 10, 20]\n","}"],"metadata":{"id":"eErxWMm7Id54","executionInfo":{"status":"ok","timestamp":1690541708907,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# grid search\n","classifier = RandomizedSearchCV(model, parameters, cv=5)"],"metadata":{"id":"Pn8DCbA2Ig-m","executionInfo":{"status":"ok","timestamp":1690541708908,"user_tz":-420,"elapsed":11,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# fitting the data to our model\n","classifier.fit(X, Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":118},"id":"UI4p-l5RIruS","executionInfo":{"status":"ok","timestamp":1690541768387,"user_tz":-420,"elapsed":59490,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"76ac6edb-38af-4784-8e6c-a80e844144c0"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=5, estimator=SVC(),\n","                   param_distributions={'C': [1, 5, 10, 20],\n","                                        'kernel': ['linear', 'poly', 'rbf',\n","                                                   'sigmoid']})"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=SVC(),\n","                   param_distributions={&#x27;C&#x27;: [1, 5, 10, 20],\n","                                        &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;,\n","                                                   &#x27;sigmoid&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=SVC(),\n","                   param_distributions={&#x27;C&#x27;: [1, 5, 10, 20],\n","                                        &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;,\n","                                                   &#x27;sigmoid&#x27;]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["classifier.cv_results_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QiZso2A2IwKA","executionInfo":{"status":"ok","timestamp":1690541768387,"user_tz":-420,"elapsed":20,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"d9514274-a0a3-4a19-8764-247763e07934"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([7.79793983e+00, 1.70203605e+00, 5.34338951e-03, 5.38558960e-03,\n","        3.87492180e-03, 1.41785145e-02, 1.56908989e-02, 1.47402287e-02,\n","        4.18591499e-03, 4.11505699e-03]),\n"," 'std_fit_time': array([2.47707761e+00, 7.26169134e-01, 2.12053229e-03, 1.14919761e-03,\n","        1.21324991e-04, 6.12599714e-04, 1.61927221e-03, 4.01457979e-04,\n","        1.19400634e-04, 1.89428769e-04]),\n"," 'mean_score_time': array([0.00135875, 0.00128703, 0.0016017 , 0.00176115, 0.00123301,\n","        0.00362296, 0.00415277, 0.00384383, 0.00152745, 0.00160947]),\n"," 'std_score_time': array([3.24675266e-04, 2.08635487e-04, 4.82345687e-04, 8.79993272e-04,\n","        2.93754911e-05, 9.11108918e-05, 7.21360176e-04, 1.71181511e-04,\n","        3.75693821e-05, 1.11741536e-04]),\n"," 'param_kernel': masked_array(data=['linear', 'linear', 'poly', 'poly', 'poly', 'sigmoid',\n","                    'sigmoid', 'sigmoid', 'rbf', 'rbf'],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'param_C': masked_array(data=[20, 1, 5, 20, 1, 20, 10, 5, 10, 5],\n","              mask=[False, False, False, False, False, False, False, False,\n","                    False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'kernel': 'linear', 'C': 20},\n","  {'kernel': 'linear', 'C': 1},\n","  {'kernel': 'poly', 'C': 5},\n","  {'kernel': 'poly', 'C': 20},\n","  {'kernel': 'poly', 'C': 1},\n","  {'kernel': 'sigmoid', 'C': 20},\n","  {'kernel': 'sigmoid', 'C': 10},\n","  {'kernel': 'sigmoid', 'C': 5},\n","  {'kernel': 'rbf', 'C': 10},\n","  {'kernel': 'rbf', 'C': 5}],\n"," 'split0_test_score': array([0.92982456, 0.94736842, 0.88596491, 0.87719298, 0.84210526,\n","        0.47368421, 0.48245614, 0.49122807, 0.87719298, 0.88596491]),\n"," 'split1_test_score': array([0.95614035, 0.92982456, 0.9122807 , 0.92105263, 0.88596491,\n","        0.40350877, 0.40350877, 0.42105263, 0.92105263, 0.92982456]),\n"," 'split2_test_score': array([0.95614035, 0.97368421, 0.92105263, 0.90350877, 0.92982456,\n","        0.42105263, 0.42105263, 0.42105263, 0.9122807 , 0.93859649]),\n"," 'split3_test_score': array([0.93859649, 0.92105263, 0.93859649, 0.93859649, 0.94736842,\n","        0.34210526, 0.34210526, 0.35087719, 0.95614035, 0.94736842]),\n"," 'split4_test_score': array([0.96460177, 0.95575221, 0.95575221, 0.95575221, 0.9380531 ,\n","        0.3539823 , 0.36283186, 0.37168142, 0.94690265, 0.95575221]),\n"," 'mean_test_score': array([0.9490607 , 0.94553641, 0.92272939, 0.91922062, 0.90866325,\n","        0.39886664, 0.40239093, 0.41117839, 0.92271386, 0.93150132]),\n"," 'std_test_score': array([0.01281637, 0.01868869, 0.02368918, 0.02730027, 0.03938232,\n","        0.0476401 , 0.0489065 , 0.04857818, 0.02787898, 0.02435811]),\n"," 'rank_test_score': array([ 1,  2,  4,  6,  7, 10,  9,  8,  5,  3], dtype=int32)}"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# best parameters\n","\n","best_parameters = classifier.best_params_\n","print(best_parameters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJDZTK_wIz2Z","executionInfo":{"status":"ok","timestamp":1690541768388,"user_tz":-420,"elapsed":19,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"f96c59ef-7b55-4658-c3a0-5b1970ad6636"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["{'kernel': 'linear', 'C': 20}\n"]}]},{"cell_type":"code","source":["# higest accuracy\n","\n","highest_accuracy = classifier.best_score_\n","print(highest_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690541768388,"user_tz":-420,"elapsed":17,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"671faa9e-ddf9-4b95-a6d8-bc00c67f3cf4","id":"xnq8i9XSI-_-"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9490607048594939\n"]}]},{"cell_type":"code","source":["# loading the results to pandas dataframe\n","result = pd.DataFrame(classifier.cv_results_)"],"metadata":{"id":"v6NCme_2I-__","executionInfo":{"status":"ok","timestamp":1690541768388,"user_tz":-420,"elapsed":15,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["result.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"executionInfo":{"status":"ok","timestamp":1690541768389,"user_tz":-420,"elapsed":16,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"a0184db4-e48d-4152-c028-517a78d8d973","id":"7obRN-VLI-__"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_kernel  \\\n","0       7.797940      2.477078         0.001359        0.000325       linear   \n","1       1.702036      0.726169         0.001287        0.000209       linear   \n","2       0.005343      0.002121         0.001602        0.000482         poly   \n","3       0.005386      0.001149         0.001761        0.000880         poly   \n","4       0.003875      0.000121         0.001233        0.000029         poly   \n","\n","  param_C                         params  split0_test_score  \\\n","0      20  {'kernel': 'linear', 'C': 20}           0.929825   \n","1       1   {'kernel': 'linear', 'C': 1}           0.947368   \n","2       5     {'kernel': 'poly', 'C': 5}           0.885965   \n","3      20    {'kernel': 'poly', 'C': 20}           0.877193   \n","4       1     {'kernel': 'poly', 'C': 1}           0.842105   \n","\n","   split1_test_score  split2_test_score  split3_test_score  split4_test_score  \\\n","0           0.956140           0.956140           0.938596           0.964602   \n","1           0.929825           0.973684           0.921053           0.955752   \n","2           0.912281           0.921053           0.938596           0.955752   \n","3           0.921053           0.903509           0.938596           0.955752   \n","4           0.885965           0.929825           0.947368           0.938053   \n","\n","   mean_test_score  std_test_score  rank_test_score  \n","0         0.949061        0.012816                1  \n","1         0.945536        0.018689                2  \n","2         0.922729        0.023689                4  \n","3         0.919221        0.027300                6  \n","4         0.908663        0.039382                7  "],"text/html":["\n","\n","  <div id=\"df-636b0986-d0d0-44ef-9097-24cd6833461b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_kernel</th>\n","      <th>param_C</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>split3_test_score</th>\n","      <th>split4_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.797940</td>\n","      <td>2.477078</td>\n","      <td>0.001359</td>\n","      <td>0.000325</td>\n","      <td>linear</td>\n","      <td>20</td>\n","      <td>{'kernel': 'linear', 'C': 20}</td>\n","      <td>0.929825</td>\n","      <td>0.956140</td>\n","      <td>0.956140</td>\n","      <td>0.938596</td>\n","      <td>0.964602</td>\n","      <td>0.949061</td>\n","      <td>0.012816</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.702036</td>\n","      <td>0.726169</td>\n","      <td>0.001287</td>\n","      <td>0.000209</td>\n","      <td>linear</td>\n","      <td>1</td>\n","      <td>{'kernel': 'linear', 'C': 1}</td>\n","      <td>0.947368</td>\n","      <td>0.929825</td>\n","      <td>0.973684</td>\n","      <td>0.921053</td>\n","      <td>0.955752</td>\n","      <td>0.945536</td>\n","      <td>0.018689</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.005343</td>\n","      <td>0.002121</td>\n","      <td>0.001602</td>\n","      <td>0.000482</td>\n","      <td>poly</td>\n","      <td>5</td>\n","      <td>{'kernel': 'poly', 'C': 5}</td>\n","      <td>0.885965</td>\n","      <td>0.912281</td>\n","      <td>0.921053</td>\n","      <td>0.938596</td>\n","      <td>0.955752</td>\n","      <td>0.922729</td>\n","      <td>0.023689</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.005386</td>\n","      <td>0.001149</td>\n","      <td>0.001761</td>\n","      <td>0.000880</td>\n","      <td>poly</td>\n","      <td>20</td>\n","      <td>{'kernel': 'poly', 'C': 20}</td>\n","      <td>0.877193</td>\n","      <td>0.921053</td>\n","      <td>0.903509</td>\n","      <td>0.938596</td>\n","      <td>0.955752</td>\n","      <td>0.919221</td>\n","      <td>0.027300</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.003875</td>\n","      <td>0.000121</td>\n","      <td>0.001233</td>\n","      <td>0.000029</td>\n","      <td>poly</td>\n","      <td>1</td>\n","      <td>{'kernel': 'poly', 'C': 1}</td>\n","      <td>0.842105</td>\n","      <td>0.885965</td>\n","      <td>0.929825</td>\n","      <td>0.947368</td>\n","      <td>0.938053</td>\n","      <td>0.908663</td>\n","      <td>0.039382</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-636b0986-d0d0-44ef-9097-24cd6833461b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-8766c749-6470-41a2-bcc4-ce5499823f94\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8766c749-6470-41a2-bcc4-ce5499823f94')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-8766c749-6470-41a2-bcc4-ce5499823f94 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-636b0986-d0d0-44ef-9097-24cd6833461b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-636b0986-d0d0-44ef-9097-24cd6833461b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["randomized_search_result = result[['param_C','param_kernel','mean_test_score']]"],"metadata":{"id":"pTZ5a24WI_AA","executionInfo":{"status":"ok","timestamp":1690541768389,"user_tz":-420,"elapsed":14,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["randomized_search_result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1690541768390,"user_tz":-420,"elapsed":15,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}},"outputId":"4ad3014b-b5e1-441e-8eed-b7cda5b7b401","id":"C_exY6JXI_AA"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  param_C param_kernel  mean_test_score\n","0      20       linear         0.949061\n","1       1       linear         0.945536\n","2       5         poly         0.922729\n","3      20         poly         0.919221\n","4       1         poly         0.908663\n","5      20      sigmoid         0.398867\n","6      10      sigmoid         0.402391\n","7       5      sigmoid         0.411178\n","8      10          rbf         0.922714\n","9       5          rbf         0.931501"],"text/html":["\n","\n","  <div id=\"df-59dd611d-b4cc-4dd7-9795-5ac908dd7734\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>param_C</th>\n","      <th>param_kernel</th>\n","      <th>mean_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20</td>\n","      <td>linear</td>\n","      <td>0.949061</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>linear</td>\n","      <td>0.945536</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>poly</td>\n","      <td>0.922729</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>20</td>\n","      <td>poly</td>\n","      <td>0.919221</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>poly</td>\n","      <td>0.908663</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>20</td>\n","      <td>sigmoid</td>\n","      <td>0.398867</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>10</td>\n","      <td>sigmoid</td>\n","      <td>0.402391</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5</td>\n","      <td>sigmoid</td>\n","      <td>0.411178</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>10</td>\n","      <td>rbf</td>\n","      <td>0.922714</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>5</td>\n","      <td>rbf</td>\n","      <td>0.931501</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59dd611d-b4cc-4dd7-9795-5ac908dd7734')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-35a95d1f-f135-469a-bddd-2ee6ff3bd6a1\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35a95d1f-f135-469a-bddd-2ee6ff3bd6a1')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-35a95d1f-f135-469a-bddd-2ee6ff3bd6a1 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-59dd611d-b4cc-4dd7-9795-5ac908dd7734 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-59dd611d-b4cc-4dd7-9795-5ac908dd7734');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","source":["Highest Accuracy = 95.2%\n","\n","Best Parameters = {'C':10, 'kernel':'linear'}"],"metadata":{"id":"8TtW4xvJJn_9"}},{"cell_type":"code","source":[],"metadata":{"id":"ec_vchQRJc06","executionInfo":{"status":"ok","timestamp":1690541768390,"user_tz":-420,"elapsed":14,"user":{"displayName":"Carolin de Luffy","userId":"11014623766953449459"}}},"execution_count":36,"outputs":[]}]}